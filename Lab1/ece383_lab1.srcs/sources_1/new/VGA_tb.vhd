----------------------------------------------------------------------------------
--  Generated by ChatGPT on 2025-01-24
--  
--  Test Bench Name: VGA_tb
--  
--  This test bench verifies the functionality of the VGA component. In particular,
--  it exercises the horizontal and vertical counters that count up to 800 (columns)
--  and 525 (rows), ensuring that once the column count reaches 799 and rolls over,
--  the row count increments as expected. Additional signals exist for trigger time,
--  trigger voltage, and channel enables, which can be driven as needed for further
--  testing.
----------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity VGA_tb is
    -- Test bench has no external ports
end VGA_tb;

architecture test_bench of VGA_tb is

    ----------------------------------------------------------------------------
    -- 1. Component Declaration for the Unit Under Test (UUT)
    ----------------------------------------------------------------------------
    component VGA is
        Port(
            i_clk          : in  STD_LOGIC;
            i_reset_n      : in  STD_LOGIC;
            o_h_sync       : out STD_LOGIC;
            o_sync         : out STD_LOGIC;
            o_blank        : out STD_LOGIC;
            o_R            : out STD_LOGIC_VECTOR(7 downto 0);
            o_G            : out STD_LOGIC_VECTOR(7 downto 0);
            o_B            : out STD_LOGIC_VECTOR(7 downto 0);
            i_trigger_time : in  unsigned(9 downto 0);
            i_trigger_volt : in  unsigned(9 downto 0);
            o_row          : out unsigned(9 downto 0);
            o_column       : out unsigned(9 downto 0);
            i_ch1          : in  std_logic;
            i_ch1_enb      : in  std_logic;
            i_ch2          : in  std_logic;
            i_ch2_enb      : in  std_logic
        );
    end component;

    ----------------------------------------------------------------------------
    -- 2. Signal Declarations
    ----------------------------------------------------------------------------
    signal w_clk          : STD_LOGIC := '0';
    signal w_reset_n      : STD_LOGIC := '0';
    signal w_h_sync       : STD_LOGIC;
    signal w_sync         : STD_LOGIC;
    signal w_blank        : STD_LOGIC;
    signal w_R            : STD_LOGIC_VECTOR(7 downto 0);
    signal w_G            : STD_LOGIC_VECTOR(7 downto 0);
    signal w_B            : STD_LOGIC_VECTOR(7 downto 0);
    signal w_trigger_time : unsigned(9 downto 0) := (others => '0');
    signal w_trigger_volt : unsigned(9 downto 0) := (others => '0');
    signal w_row          : unsigned(9 downto 0);
    signal w_column       : unsigned(9 downto 0);
    signal w_ch1          : std_logic := '0';
    signal w_ch1_enb      : std_logic := '0';
    signal w_ch2          : std_logic := '0';
    signal w_ch2_enb      : std_logic := '0';

    -- Clock Period
    constant c_clk_period : time := 50 ps;

begin

    ----------------------------------------------------------------------------
    -- 3. Instantiate the Unit Under Test (UUT)
    ----------------------------------------------------------------------------
    uut: VGA
        port map (
            i_clk          => w_clk,
            i_reset_n      => w_reset_n,
            o_h_sync       => w_h_sync,
            o_sync         => w_sync,
            o_blank        => w_blank,
            o_R            => w_R,
            o_G            => w_G,
            o_B            => w_B,
            i_trigger_time => w_trigger_time,
            i_trigger_volt => w_trigger_volt,
            o_row          => w_row,
            o_column       => w_column,
            i_ch1          => w_ch1,
            i_ch1_enb      => w_ch1_enb,
            i_ch2          => w_ch2,
            i_ch2_enb      => w_ch2_enb
        );

    ----------------------------------------------------------------------------
    -- 4. Clock Generation Process
    ----------------------------------------------------------------------------
    p_clk : process
    begin
        while TRUE loop
            w_clk <= '0';
            wait for c_clk_period / 2;
            w_clk <= '1';
            wait for c_clk_period / 2;
        end loop;
    end process;

    ----------------------------------------------------------------------------
    -- 5. Stimulus Process
    ----------------------------------------------------------------------------
    -- The goal is to let the counter run long enough to see w_column roll over
    -- from 799 back to 0, at which point w_row should increment by 1.
    ----------------------------------------------------------------------------
    p_stimulus : process
    begin
        -- Initial Reset
        w_reset_n <= '0';
        wait for 1 ns;  -- Wait some time before releasing reset

        w_reset_n <= '1';
        wait for 1 ns; -- Give counters some time to start counting

        -- Let the simulation run for enough cycles to observe multiple rollovers
        wait for 10000 * c_clk_period;

        -- End simulation
        wait;
    end process;

end test_bench;
